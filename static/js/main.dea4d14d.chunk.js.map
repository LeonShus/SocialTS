{"version":3,"sources":["Components/Profile/PrfileInfo/ProfileInfo.module.css","Components/Dialogs/DialogItem/DialogItem.module.css","DAL/API.ts","Components/Users/Users.tsx","Redux/Reducers/UsersReducer.ts","DefaultItems/Paginator/Paginator.tsx","DefaultItems/Preloader/Preloader.tsx","Components/Users/UsersContainer.tsx","Redux/Reducers/ProfileReducer.ts","Components/Profile/PrfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","HOC/WithAuth.tsx","Components/Profile/Profile.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Redux/Reducers/DialogsReducer.ts","Components/Dialogs/Message/Message.tsx","Components/Dialogs/MessagesWindow/MessagesWindow.tsx","Components/Dialogs/Dialogs.tsx","Redux/Reducers/AuthReducer.ts","Components/Login/Login.tsx","Components/SideNav/SideNav.tsx","Components/Header/Header.tsx","Redux/Reducers/AppReducer.ts","App.tsx","reportWebVitals.ts","Redux/ReduxStore.ts","index.tsx","DefaultItems/Img/userDef.png","Components/Header/Header.module.css","Components/SideNav/SideNav.module.css"],"names":["module","exports","ResultCodeEnum","UsersContainer","followUserCallBack","unfollowUserCallBack","users","useSelector","state","usersPage","followInProgress","usersJsxArray","map","u","followButton","followed","Button","disabled","some","el","id","onClick","size","variant","Grid","item","xs","key","Paper","elevation","sx","p","maxWidth","flexGrow","mt","container","spacing","ButtonBase","width","height","position","top","to","Avatar","alt","name","undefined","src","photos","small","userDef","sm","direction","Typography","gutterBottom","component","fontSize","status","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","post","delete","profileAPI","userId","put","authAPI","email","password","rememberMe","initState","totalUsersCount","isFetching","setIsFetchingAC","type","setFollowProgressStartAC","setFollowProgressEndAC","Paginator","setCurrentPage","useState","page","setPage","pages","Math","ceil","Pagination","count","color","onChange","e","value","Preloader","className","Users","dispatch","useDispatch","useEffect","items","totalCount","setUsersT","setCurrentPageAC","columns","resultCode","Success","followAC","followUserT","unfollowAC","unfollowUserT","user","postsData","v1","message","likeCount","setUserStatusAC","setProfileT","setUserStatusT","changeStatusT","ProfileInfo","memo","mainUserId","userStatus","profilePage","setStatus","editStatus","setEditStatus","border","mb","classes","avatar","fullName","ml","fontWeight","TextField","autoFocus","onKeyPress","charCode","currentTarget","onBlur","onDoubleClick","Post","props","padding","left","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","MyPosts","formik","useFormik","initialValues","newPost","validationSchema","Yup","max","onSubmit","values","trim","text","posts","handleSubmit","error","errors","helperText","multiline","rows","handleChange","WithAuthHOC","Component","authUser","isAuth","Profile","Number","match","params","compose","withRouter","DialogItem","minWidth","navLinkStyle","messages","Message","wordWrap","backgroundColor","borderRadius","MessagesWindow","send","messageArr","dialogsPage","Dialogs","usersArr","margin","newMessage","login","loginServerError","setAuthAC","setIsAuthAC","setLoginServerErrorAC","getAuthUserT","Login","loginError","pass","required","loginT","display","rowGap","label","touched","SideNav","isOpen","close","Drawer","anchor","open","onClose","links","List","ListItem","ListItemIcon","Home","activeClassName","activeLink","PeopleAlt","Chat","Header","userLogin","isSideNavOpen","setSideNavOpen","btn","AppBar","Toolbar","IconButton","edge","active","initialised","App","isInitialised","app","Container","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","newMes","filter","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddle","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dea4d14d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__38kak\",\"container\":\"ProfileInfo_container__11Am1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLinkStyle\":\"DialogItem_navLinkStyle__2vftY\"};","import axios from \"axios\";\nimport {UserPhotosType} from \"../Redux/Reducers/UsersReducer\";\nimport {ContactsType} from \"../Redux/Reducers/ProfileReducer\";\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"099be23b-024b-4d04-8aea-ded1a22de046\"\n    }\n})\n\nexport enum ResultCodeEnum {\n    Success = 0,\n    Error = 1\n}\n\ntype GetUsersType = {\n    items: Array<{\n        name: string\n        id: number\n        photos: UserPhotosType\n        status: string\n        followed: boolean\n    }>\n}\ntype FollowedUserType = {\n    resultCode: ResultCodeEnum\n    messages: Array<string>\n    data: any\n}\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    followToUser(id: number) {\n        return instance.post<FollowedUserType>(`follow/${id}`)\n            .then(response => response.data)\n    },\n    unfollowUser(id: number) {\n        return instance.delete<FollowedUserType>(`follow/${id}`)\n            .then(response => response.data)\n    }\n}\n\ntype GetUserProfileType = {\n    aboutMe: null | string\n    contacts: ContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    fullName: string\n    userId: number\n    photos: UserPhotosType\n}\n\nexport const profileAPI = {\n    getUserProfile(id: number) {\n        return instance.get<GetUserProfileType>(`profile/${id}`)\n            .then(response => response.data)\n    },\n    getUserStatus(userId: number){\n        return instance.get(`profile/status/${userId}`)\n    },\n    changeStatus(status: string){\n        return instance.put('profile/status', {status})\n\n    }\n}\n\ntype GetAuthMeType = {\n    data: {\n        id: number\n        email: string\n        login: string\n    }\n    resultCode: ResultCodeEnum\n    messages: Array<string>\n}\n\nexport const authAPI = {\n    getAuthMe(){\n        return instance.get<GetAuthMeType>(`auth/me`)\n            .then(response => response.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false){\n        return instance.post(\"auth/login\", { email, password, rememberMe })\n            .then(response => response.data)\n    },\n    logOut(){\n        return instance.delete(\"auth/login\")\n    }\n}","import React from \"react\";\nimport userDef from \"../../DefaultItems/Img/userDef.png\"\nimport Button from \"@mui/material/Button\";\nimport {Avatar, ButtonBase, Grid, Paper, Typography} from \"@mui/material\";\nimport {NavLink} from \"react-router-dom\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {UsersType} from \"../../Redux/Reducers/DialogsReducer\";\nimport {UserType} from \"../../Redux/Reducers/UsersReducer\";\n\n\nexport type UsersPropsType = {\n    followUserCallBack: (id: number) => void\n    unfollowUserCallBack: (id: number) => void\n}\n\nexport const UsersContainer = ({followUserCallBack, unfollowUserCallBack}: UsersPropsType) => {\n    const users = useSelector<AppStateType,UserType[]>(state => state.usersPage.users)\n    const followInProgress = useSelector<AppStateType,number[]>(state => state.usersPage.followInProgress)\n\n\n    const usersJsxArray = users.map(u => {\n\n        const followButton = !u.followed\n            ? <Button disabled={followInProgress.some(el => el === u.id)}\n                      onClick={() => followUserCallBack(u.id)}\n                      size={\"small\"}\n                      variant=\"contained\">follow</Button>\n            : <Button disabled={followInProgress.some(el => el === u.id)}\n                      onClick={() => unfollowUserCallBack(u.id)}\n                      size={\"small\"}\n                      variant=\"contained\">Unfollow</Button>\n\n        return (\n            <Grid item xs={8} key={u.id}>\n                <Paper elevation={3} sx={{p: 2, maxWidth: 400, flexGrow: 1, mt: 2}}>\n                    <Grid container spacing={3}>\n\n                        <Grid item>\n                            <ButtonBase sx={{width: 80, height: 80, position: \"relative\", top: 10}}>\n                                <NavLink to={`/profile/${u.id}`}>\n                                    <Avatar alt={u.name ? u.name : undefined}\n                                            src={!u.photos.small ? userDef : u.photos.small}\n                                            sx={{width: 80, height: 80}}\n                                    />\n                                </NavLink>\n                            </ButtonBase>\n                        </Grid>\n\n                        <Grid item xs={12} sm container>\n                            <Grid item xs container direction=\"column\" spacing={2}>\n                                <Grid item xs>\n\n                                    <Typography\n                                        gutterBottom\n                                        variant={\"subtitle1\"}\n                                        component={\"div\"}\n                                        sx={{fontSize: \"1.3rem\"}}\n                                    >\n                                        {u.name}\n                                    </Typography>\n\n                                    <Typography variant={\"body2\"}>\n                                        {u.status}\n                                    </Typography>\n\n                                </Grid>\n                                <Grid item>\n                                    {followButton}\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n        )\n    })\n\n    return (\n        <>\n            {usersJsxArray}\n        </>\n    )\n}","import {ResultCodeEnum, usersAPI} from \"../../DAL/API\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"../ReduxStore\";\n\n\nconst SET_FOLLOW_PROGRESS_END = \"SET-FOLLOW-PROGRESS-END\"\n\nexport type UserPhotosType = {\n    large: null | string\n    small: null | string\n}\n\nexport type UserType = {\n    followed: boolean | null\n    id: number\n    name: string | null\n    photos: UserPhotosType\n    status: string | null\n    uniqueUrlName: string | null\n}\n\nlet initState = {\n    users: [] as Array<UserType>,\n    totalUsersCount: 0,\n    pageSize: 10,\n    currentPage: 1,\n    isFetching: false,\n    followInProgress: [] as Array<number>\n}\n\ntype UsersReducerInitType = typeof initState\n\nexport type UsersReducerActionType =\n    FollowACT\n    | UnFollowACT\n    | SetUsersACT\n    | SetTotalUsersCountACT\n    | SetCurrentPageACT\n    | SetIsFetchingACT\n    | SetFollowProgressStartACT\n    | SetFollowProgressEndACT\n\nexport const usersReducer = (state: UsersReducerInitType = initState, action: UsersReducerActionType): UsersReducerInitType => {\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(el => {\n                    return el.id === action.id ? {...el, followed: true} : el\n                })\n            }\n        case \"UNFOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(el => {\n                    return el.id === action.id ? {...el, followed: false} : el\n                })\n            }\n        case \"SET-USERS\":\n            return {...state, users: action.users}\n        case \"SET-TOTAL-USERS-COUNT\":\n            return {...state, totalUsersCount: action.totalUsersCount}\n        case \"SET-CURRENT-PAGE\":\n            return {...state, currentPage: action.currentPage}\n        case \"SET-IS-FETCHING\":\n            return {...state, isFetching: action.isFetching}\n        case \"SET-FOLLOW-PROGRESS-START\":\n            return {\n                ...state,\n                followInProgress: [...state.followInProgress, action.id]\n            }\n        case \"SET-FOLLOW-PROGRESS-END\":\n            return {\n                ...state,\n                followInProgress: state.followInProgress.filter(el => el !== action.id)\n            }\n        default :\n            return state\n    }\n}\n\n\nexport type FollowACT = ReturnType<typeof followAC>\nexport const followAC = (id: string | number) => ({type: \"FOLLOW\", id} as const)\n\nexport type UnFollowACT = ReturnType<typeof unfollowAC>\nexport const unfollowAC = (id: string | number) => ({type: \"UNFOLLOW\", id} as const)\n\nexport type SetUsersACT = ReturnType<typeof setUsersAC>\nexport const setUsersAC = (users: Array<UserType>) => ({type: \"SET-USERS\", users} as const)\n\nexport type SetTotalUsersCountACT = ReturnType<typeof setTotalUsersCountAC>\nexport const setTotalUsersCountAC = (totalUsersCount: number) => ({\n    type: \"SET-TOTAL-USERS-COUNT\",\n    totalUsersCount\n} as const)\n\nexport type SetCurrentPageACT = ReturnType<typeof setCurrentPageAC>\nexport const setCurrentPageAC = (currentPage: number) => ({type: \"SET-CURRENT-PAGE\", currentPage} as const)\n\nexport type SetIsFetchingACT = ReturnType<typeof setIsFetchingAC>\nexport const setIsFetchingAC = (isFetching: boolean) => ({type: \"SET-IS-FETCHING\", isFetching} as const)\n\nexport type SetFollowProgressStartACT = ReturnType<typeof setFollowProgressStartAC>\nexport const setFollowProgressStartAC = (id: number) => ({\n    type: \"SET-FOLLOW-PROGRESS-START\",\n    id\n} as const)\n\nexport type SetFollowProgressEndACT = ReturnType<typeof setFollowProgressEndAC>\nexport const setFollowProgressEndAC = (id: number) => ({type: SET_FOLLOW_PROGRESS_END, id} as const)\n\n\n//THUNK\n\nexport type UserReducerThunkType = ThunkAction<any, AppStateType, unknown, UsersReducerActionType>\n\nexport const setUsersT = (currentPage: number, pageSize: number): UserReducerThunkType =>\n    (dispatch) => {\n        dispatch(setIsFetchingAC(true))\n\n        usersAPI.getUsers(currentPage, pageSize)\n            .then((response: any) => {\n                dispatch(setUsersAC(response.items))\n                dispatch(setTotalUsersCountAC(response.totalCount))\n                dispatch(setIsFetchingAC(false))\n            })\n    }\n\nexport const followUserT = (id: number): UserReducerThunkType =>\n    (dispatch) => {\n        dispatch(setFollowProgressStartAC(id))\n\n        usersAPI.followToUser(id)\n            .then(response => {\n                if (response.resultCode === ResultCodeEnum.Success) {\n                    dispatch(followAC(id))\n                }\n                dispatch(setFollowProgressEndAC(id))\n            })\n    }\n\nexport const unfollowUserT = (id: number): UserReducerThunkType =>\n    (dispatch) => {\n        dispatch(setFollowProgressStartAC(id))\n\n        usersAPI.unfollowUser(id)\n            .then(response => {\n                if (response.resultCode === ResultCodeEnum.Success) {\n                    dispatch(unfollowAC(id))\n                }\n                dispatch(setFollowProgressEndAC(id))\n            })\n    }\n","import React, {useState} from \"react\"\nimport {Pagination} from \"@mui/material\";\n\n\nexport type PaginatorPropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    setCurrentPage: (currentPage: number) => void\n}\n\nexport const Paginator = ({totalUsersCount, pageSize, currentPage, setCurrentPage}: PaginatorPropsType) => {\n\n    const [page, setPage] = useState<number>(currentPage)\n\n    const pages = Math.ceil(totalUsersCount / pageSize)\n\n    const pageChangeHandler = (e: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value)\n        setCurrentPage(value)\n    }\n\n    return (\n\n        <Pagination count={pages}\n                    variant={\"outlined\"}\n                    color=\"secondary\"\n                    page={page}\n                    onChange={pageChangeHandler}\n        />\n\n\n    )\n}","import React from \"react\"\nimport './Preloader.css'\n\nexport const Preloader = () => {\n    return (\n        <div className=\"middle\">\n            <div className=\"bar bar1\"></div>\n            <div className=\"bar bar2\"></div>\n            <div className=\"bar bar3\"></div>\n            <div className=\"bar bar4\"></div>\n            <div className=\"bar bar5\"></div>\n            <div className=\"bar bar6\"></div>\n            <div className=\"bar bar7\"></div>\n            <div className=\"bar bar8\"></div>\n        </div>\n    )\n}","import React, {useEffect} from \"react\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {UsersContainer} from \"./Users\";\nimport {followUserT, setCurrentPageAC, setUsersT, unfollowUserT} from \"../../Redux/Reducers/UsersReducer\";\nimport {Paginator} from \"../../DefaultItems/Paginator/Paginator\";\nimport {Preloader} from \"../../DefaultItems/Preloader/Preloader\";\nimport {Grid} from \"@mui/material\";\n\n\nexport const Users = () => {\n    const dispatch = useDispatch()\n    const isFetching = useSelector<AppStateType,boolean>(state => state.usersPage.isFetching)\n    const totalUsersCount = useSelector<AppStateType,number>(state => state.usersPage.totalUsersCount)\n    const pageSize = useSelector<AppStateType,number>(state => state.usersPage.pageSize)\n    const currentPage = useSelector<AppStateType,number>(state => state.usersPage.currentPage)\n    const setCurrentPage = (page: number) => {\n        dispatch(setCurrentPageAC(page))\n    }\n\n    //Получаем пользователей\n    useEffect(() => {\n        dispatch(setUsersT(currentPage, pageSize))\n    }, [currentPage])\n\n    //Подписываемся на поьзователя\n    const followUserCallBack = (id: number) => {\n        dispatch(followUserT(id))\n    }\n    //Отписываемся от пользователя\n    const unfollowUserCallBack = (id: number) => {\n        dispatch(unfollowUserT(id))\n    }\n\n    return (\n        <>\n            {isFetching && <Preloader/>}\n            <Paginator totalUsersCount={totalUsersCount}\n                       pageSize={pageSize}\n                       currentPage={currentPage}\n                       setCurrentPage={setCurrentPage}\n            />\n\n\n            <Grid container spacing={2} columns={16}>\n                <UsersContainer followUserCallBack={followUserCallBack}\n                                unfollowUserCallBack={unfollowUserCallBack}\n                />\n            </Grid>\n        </>\n    )\n}\n","import {v1} from \"uuid\";\nimport {UserPhotosType} from \"./UsersReducer\";\nimport {profileAPI} from \"../../DAL/API\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"../ReduxStore\";\n\nexport type PostDataType = {\n    id: string | number\n    message: string\n    likeCount: number\n}\n\nexport type ContactsType = {\n    facebook: null | string\n    website: null | string\n    vk: null | string\n    twitter: null | string\n    instagram: null | string\n    youtube: null | string\n    github: null | string\n    mainLink: null | string\n}\nexport type UserType = {\n    aboutMe: null | string\n    contacts: ContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    fullName: string\n    userId: number\n    photos: UserPhotosType\n}\n\nlet initState = {\n    user: {} as UserType,\n    status: \"\",\n    postsData: [\n        {id: v1(), message: \"Hello, Boy\", likeCount: 10},\n        {id: v1(), message: \"Boy\", likeCount: 33},\n        {id: v1(), message: \"Sup\", likeCount: 21},\n    ] as Array<PostDataType>,\n}\n\nexport type ProfileInitStateType = typeof initState\n\ntype ProfileReducerActionType = AddNewPostACT | SetUserToProfilePageACT | SetUserStatusACT\n\nexport const profileReducer = (state: ProfileInitStateType = initState, action: ProfileReducerActionType): ProfileInitStateType => {\n    switch (action.type) {\n        case \"ADD-NEW-POST\":\n            let newPost: PostDataType = {\n                id: v1(),\n                message: action.text,\n                likeCount: 0\n            }\n            return {\n                ...state,\n                postsData: [...state.postsData, newPost]\n            }\n        case \"SET-USER-TO-PROFILE-PAGE\":\n            return {\n                ...state,\n                user: action.user\n            }\n        case \"SET-USER-STATUS\":\n            return {\n                ...state,\n                status: action.status\n            }\n        default :\n            return state\n    }\n}\n\nexport type AddNewPostACT = ReturnType<typeof addNewPostAC>\nexport const addNewPostAC = (text: string) => ({type: \"ADD-NEW-POST\", text: text} as const)\n\nexport type SetUserToProfilePageACT = ReturnType<typeof setUserToProfilePageAC>\nexport const setUserToProfilePageAC = (user: UserType) => ({\n    type: \"SET-USER-TO-PROFILE-PAGE\",\n    user\n} as const)\n\nexport type SetUserStatusACT = ReturnType<typeof setUserStatusAC>\nexport const setUserStatusAC = (status: string) => ({type: \"SET-USER-STATUS\", status} as const)\n\n//THUNK\n\nexport type ProfileReducerThunkType = ThunkAction<any, AppStateType, unknown, ProfileReducerActionType>\n\nexport const setProfileT = (userId: number): ProfileReducerThunkType => (dispatch) => {\n    profileAPI.getUserProfile(userId)\n        .then(response => {\n            dispatch(setUserToProfilePageAC(response))\n        })\n}\n\nexport const setUserStatusT = (userId: number): ProfileReducerThunkType => (dispatch) => {\n    return profileAPI.getUserStatus(userId)\n        .then(response => {\n            if (response.status === 200) {\n                dispatch(setUserStatusAC(response.data))\n            }\n        })\n}\n\nexport const changeStatusT = (status: string): ProfileReducerThunkType => (dispatch) => {\n    profileAPI.changeStatus(status)\n        .then(response => {\n            if (response.status === 200) {\n                dispatch(setUserStatusAC(status))\n            }\n        })\n}","import classes from \"./ProfileInfo.module.css\";\nimport userDef from \"../../../DefaultItems/Img/userDef.png\";\nimport React, {ChangeEvent, memo, useState} from \"react\";\nimport {changeStatusT, UserType} from \"../../../Redux/Reducers/ProfileReducer\";\nimport {Avatar, Grid, TextField, Typography} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/ReduxStore\";\n\ntype ProfileInfoPropsType = {\n    user: UserType\n    mainUserId: number | null\n}\n\nconst ProfileInfo = memo(({user, mainUserId}: ProfileInfoPropsType) => {\n    const dispatch = useDispatch()\n    const userStatus = useSelector<AppStateType,string>(state => state.profilePage.status)\n\n    const [status, setStatus] = useState(userStatus)\n    const [editStatus, setEditStatus] = useState(false)\n\n\n    const getUserPhoto = () => {\n        return user.photos && user.photos.small ? user.photos.small : userDef\n    }\n    const editModeOn = () => {\n        mainUserId === user.userId &&\n        setEditStatus(true)\n    }\n    const editModeOff = (e: any) => {\n        if (e.charCode === 13) {\n            setEditStatus(false)\n            dispatch(changeStatusT(status))\n        }\n    }\n    const onBlurHandler = () => {\n        setEditStatus(false)\n        dispatch(changeStatusT(status))\n    }\n    const changeStatusText = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <Grid container\n              sx={{\n                  border: \"1px solid black\",\n                  mb: \"40px\"\n              }}\n        >\n            <Grid item>\n                <Avatar className={classes.avatar}\n                        src={getUserPhoto()}\n                        alt={user.fullName}\n                        sx={{width: \"150px\", height: \"150px\"}}\n                />\n            </Grid>\n            <Grid item\n                  sx={{ml: \"20px\"}}\n            >\n                <Typography sx={{fontSize: \"2.2rem\", fontWeight: \"300\"}}>\n                    {user.fullName}\n                </Typography>\n\n                <Grid container>\n                    {editStatus\n                        ? <TextField autoFocus\n                                     size={\"small\"}\n                                     variant={\"outlined\"}\n                                     onKeyPress={editModeOff}\n                                     onChange={changeStatusText}\n                                     onBlur={onBlurHandler}\n                        />\n\n                        : <Typography\n                            onDoubleClick={editModeOn}\n                            sx={{fontSize: \"1.2rem\"}}\n                        >\n                            {userStatus}\n                        </Typography>\n                    }\n                </Grid>\n            </Grid>\n\n\n        </Grid>\n    )\n})\n\nexport default ProfileInfo","import React from \"react\";\nimport userDef from \"../../../../DefaultItems/Img/userDef.png\"\nimport {Avatar, Checkbox, Grid, Paper, Typography} from \"@mui/material\";\nimport {Favorite, FavoriteBorder} from \"@mui/icons-material\";\n\ntype PostPropsType = {\n    message: string\n    likeCount: number\n}\n\nexport const Post = (props: PostPropsType) => {\n    return (\n        <Paper elevation={3}\n               sx={{mt: \"10px\"}}\n        >\n            <Grid container\n                  sx={{\n                      padding: \"15px\",\n                      width: '500px'\n                  }}\n            >\n                <Grid item>\n                    <Avatar src={userDef}\n                            alt=\"avatar\"\n                            sx={{ height: '60px', width: '60px' }}\n                    />\n                </Grid>\n                <Grid item>\n                        <Typography variant={\"body1\"}\n                                    sx={{ml: \"15px\"}}\n                        >\n                            NAME\n                        </Typography>\n\n                        <Typography variant={\"body1\"}\n                                    sx={{ml: \"15px\"}}\n                        >\n                            {props.message}\n                        </Typography>\n                </Grid>\n\n                <Grid container\n                      sx={{\n                          position: \"relative\",\n                          left: \"-15px\",\n                          top: \"18px\"\n                      }}\n                >\n                    <Checkbox icon={<FavoriteBorder/>}\n                              checkedIcon={<Favorite/>}\n                              sx={{\n                                  color: \"gray\",\n                                  \"&.Mui-checked\": {\n                                      color: \"red\"\n                                  }\n                              }}\n                    />\n                    <Typography sx={{\n                        position: \"relative\",\n                        left: \"-8px\",\n                        top: \"8px\"\n                    }}>\n                        {props.likeCount}\n                    </Typography>\n\n                </Grid>\n            </Grid>\n        </Paper>\n\n    )\n}\n\n","import React from \"react\";\nimport {Post} from \"./Post/Post\";\nimport {Button, Grid, TextField} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/ReduxStore\";\nimport {addNewPostAC, PostDataType} from \"../../../Redux/Reducers/ProfileReducer\";\nimport {useFormik} from \"formik\";\nimport * as Yup from \"yup\";\n\n\nexport const MyPosts = () => {\n    const dispatch = useDispatch()\n    const postsData = useSelector<AppStateType, PostDataType[]>(state => state.profilePage.postsData)\n\n    const addPost = (post: string) => {\n        if (post.trim()) {   //Перед добавлением проверяем на пустую строку\n            dispatch(addNewPostAC(post.trim()))\n        }\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            newPost: \"\",\n        },\n        validationSchema: Yup.object({\n            newPost: Yup.string()\n                .max(5, \"Max chars 5\")\n        }),\n        onSubmit: values => {\n            addPost(values.newPost)\n        }\n    })\n\n    let posts = postsData.map((el) => <Post key={el.id} message={el.message} likeCount={el.likeCount}/>)\n\n    return (\n        <Grid container>\n            <Grid item>\n                <form onSubmit={formik.handleSubmit}>\n                    <TextField\n                        name={\"newPost\"}\n                        error={!!formik.errors.newPost}\n                        helperText={!!formik.errors.newPost && formik.errors.newPost}\n                        multiline\n                        rows={4}\n                        onChange={formik.handleChange}\n                        value={formik.values.newPost}\n                    />\n                    <Button type={\"submit\"} variant=\"contained\">Send</Button>\n                </form>\n            </Grid>\n\n            <Grid container>\n                <Grid item>\n                    {posts}\n                </Grid>\n            </Grid>\n\n\n        </Grid>\n    )\n}\n\nexport default MyPosts","import React, {ComponentType} from \"react\"\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../Redux/ReduxStore\";\nimport {Redirect} from \"react-router-dom\";\n\nexport function WithAuthHOC <T>(Component: ComponentType<T>) {\n\n    const ComponentWithAuth = (props: any) => {\n        let isAuth = useSelector((state: AppStateType) => state.authUser.isAuth)\n\n        if (!isAuth) {\n            return <Redirect to={\"/login\"}/>\n        }\n        return <Component {...props}/>\n    }\n    return ComponentWithAuth\n}","import React, {memo, useEffect} from \"react\";\nimport ProfileInfo from \"./PrfileInfo/ProfileInfo\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setProfileT, setUserStatusT, UserType} from \"../../Redux/Reducers/ProfileReducer\";\nimport {Preloader} from \"../../DefaultItems/Preloader/Preloader\";\nimport {Grid, Paper} from \"@mui/material\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport MyPosts from \"./MyPosts/MyPosts\";\nimport {WithAuthHOC} from \"../../HOC/WithAuth\";\nimport {compose} from \"redux\";\n\ntype WithRouterPath = {\n    userId: string\n}\n\nconst Profile = memo((props: RouteComponentProps<WithRouterPath>) => {\n    let mainUserId = useSelector<AppStateType, number | null>(state => state.authUser.id)\n    let user = useSelector<AppStateType, UserType>((state: AppStateType) => state.profilePage.user)\n    let dispatch = useDispatch()\n\n    let userId = Number(props.match.params.userId)\n\n    useEffect(() => {\n        if (userId) {\n            dispatch(setProfileT(userId))\n            dispatch(setUserStatusT(userId))\n        } else if (mainUserId) {\n            dispatch(setProfileT(mainUserId))\n            dispatch(setUserStatusT(mainUserId))\n        }\n    }, [userId, mainUserId])\n\n\n    if (!user) {\n        return <Preloader/>\n    }\n\n    return (\n        <Paper>\n            <Grid container\n                  sx={{padding: \"20px\"}}\n            >\n                <ProfileInfo user={user} mainUserId={mainUserId}/>\n                <MyPosts/>\n            </Grid>\n        </Paper>\n    )\n})\n\nexport default compose<React.ComponentType>(WithAuthHOC, withRouter)(Profile)","import React from \"react\";\nimport classes from \"./DialogItem.module.css\";\nimport userDef from \"../../../DefaultItems/Img/userDef.png\";\nimport {NavLink} from \"react-router-dom\";\nimport {Avatar, Grid, Paper} from \"@mui/material\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: string | number\n}\n\nconst DialogItem: React.FC<DialogItemPropsType> = (props) => {\n    return (\n        <Paper sx={{minWidth: \"200px\", mb: \"15px\"}}\n               elevation={3}\n        >\n            <Grid container sx={{padding: \"10px\"}} spacing={1}>\n                <Grid item>\n                    <Avatar alt={props.name} src={userDef}/>\n                </Grid>\n                <Grid item>\n                    <NavLink className={classes.navLinkStyle} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n                </Grid>\n            </Grid>\n        </Paper>\n\n    )\n}\n\nexport default DialogItem","import {v1} from \"uuid\"\n\nexport type MessageType = {\n    id: string | number\n    message: string\n}\nexport type UsersType = {\n    id: string | number\n    name: string\n}\n\nconst initState = {\n    messages: [\n        {id: v1(), message: \"Hi, bro!\"},\n        {id: v1(), message: \"GL!\"},\n        {id: v1(), message: \"Bye;)\"},\n    ] as Array<MessageType>,\n\n    users: [\n        {id: v1(), name: \"Leon\"},\n        {id: v1(), name: \"Alex\"},\n        {id: v1(), name: \"Bob\"}\n    ] as Array<UsersType>,\n}\n\nexport type DialogsInitStateType = typeof initState\n\ntype DialogsReducerActionType = SendNewMessageACT\n\nexport const dialogsReducer = (state: DialogsInitStateType = initState, action: DialogsReducerActionType) => {\n    switch (action.type) {\n        case \"ADD-NEW-MESSAGE\":\n            const newMes: MessageType = {\n                id: v1(),\n                message: action.text\n            }\n            return {\n                ...state,\n                messages: [...state.messages, newMes]\n            }\n        default:\n            return state\n    }\n}\n\ntype SendNewMessageACT = ReturnType<typeof sendNewMessageAC>\nexport const sendNewMessageAC = (text: string) => ({\n    type: \"ADD-NEW-MESSAGE\",\n    text\n} as const)","import {Grid, Typography} from \"@mui/material\";\nimport React from \"react\";\n\ntype MessagePropsType = {\n    message: string\n}\n\nconst Message: React.FC<MessagePropsType> = (props) => {\n    return (\n        <Grid container\n              sx={{\n                  mb: \"7px\",\n                  padding: \"2px\",\n                  maxWidth: \"300px\",\n                  wordWrap: \"break-word\",\n              }}\n        >\n            <Grid item>\n                <Typography variant={\"body1\"}\n                            sx={{\n                                color: 'white',\n                                backgroundColor: \"#1976D2\",\n                                padding: \"7px\",\n                                borderRadius: '5px'\n                            }}>\n                    {props.message}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Message","import React from \"react\"\nimport {Grid, TextField} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport Message from \"../Message/Message\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/ReduxStore\";\nimport {MessageType} from \"../../../Redux/Reducers/DialogsReducer\";\nimport {useFormik} from \"formik\";\nimport * as Yup from \"yup\";\n\ntype MessagesWindowPropsType = {\n    send: (newMessage: string) => void\n}\n\nexport const MessagesWindow = ({send}: MessagesWindowPropsType) => {\n\n    const messages = useSelector<AppStateType, MessageType[]>(state => state.dialogsPage.messages)\n\n    const messageArr = messages.map((el) => <Message key={el.id} message={el.message}/>)\n\n    const formik = useFormik({\n        initialValues: {\n            message: \"\",\n        },\n        validationSchema: Yup.object({\n            message: Yup.string()\n                .max(10, \"Max chars 10\")\n\n        }),\n        onSubmit: values => {\n            send(values.message)\n        }\n    })\n    return (\n        <>\n            <Grid container\n                  sx={{\n                      padding: \"20px\",\n                      border: \"2px solid gray\",\n                      borderRadius: \"5px\",\n                      mb: \"10px\"\n                  }}>\n                {messageArr}\n            </Grid>\n            {/*Send item*/}\n            <Grid item>\n                <form onSubmit={formik.handleSubmit}>\n                    <TextField\n                        multiline\n                        name={\"message\"}\n                        error={!!formik.errors.message}\n                        helperText={!!formik.errors.message && formik.errors.message}\n                        onChange={formik.handleChange}\n                        rows={4}\n                        value={formik.values.message}\n\n                    />\n                    <Button type={\"submit\"}\n                            size={\"small\"}\n                            variant=\"contained\"\n                    >\n                        Send\n                    </Button>\n                </form>\n            </Grid>\n        </>\n    )\n}","import React from \"react\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {sendNewMessageAC, UsersType} from \"../../Redux/Reducers/DialogsReducer\";\nimport {Grid, Paper} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {WithAuthHOC} from \"../../HOC/WithAuth\";\nimport {MessagesWindow} from \"./MessagesWindow/MessagesWindow\";\n\nexport const Dialogs = WithAuthHOC(() => {\n\n    const users = useSelector<AppStateType, UsersType[]>(state => state.dialogsPage.users)\n\n    const dispatch = useDispatch()\n\n    const usersArr = users.map((el) => <DialogItem key={el.id} name={el.name} id={el.id}/>)\n\n\n    const send = (newMessage: string) => {\n        dispatch(sendNewMessageAC(newMessage))\n    }\n\n    return (\n\n        <Grid container>\n            {/*Users Container*/}\n            <Grid\n                item\n                sx={{margin: \"8px 20px 0 10px\"}}\n            >\n                {usersArr}\n            </Grid>\n\n            {/*Dialog Window*/}\n            <Paper elevation={3}>\n                <Grid item\n                      sx={{\n                          width: \"500px\",\n                          padding: \"20px\"\n                      }}\n                >\n                    {/*Messages window*/}\n                    <MessagesWindow send={send}/>\n\n                </Grid>\n            </Paper>\n\n        </Grid>\n\n    )\n})","import {authAPI, ResultCodeEnum} from \"../../DAL/API\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"../ReduxStore\";\n\nexport type AuthStateType = {\n    id: null | number\n    email: null | string\n    login: null | string\n    isAuth: boolean\n    loginServerError?: string\n}\n\nconst initState: AuthStateType = {\n    email: null,\n    id: null,\n    login: null,\n    isAuth: false,\n    loginServerError: \"\"\n}\n\ntype AuthReducerActionType = SetAuthACType | SetLoginServerErrorAT | SetIsAuthAT\n\nexport const authReducer = (state: AuthStateType = initState, action: AuthReducerActionType): AuthStateType => {\n    switch (action.type) {\n        case \"SET-AUTH\":\n            return {\n                ...state,\n                email: action.email,\n                login: action.login,\n                id: action.id\n            }\n        case \"SET-LOGIN-SERVER-ERROR\":\n            return {\n                ...state,\n                loginServerError: action.error\n            }\n        case \"SET-IS-AUTH\":\n            return {\n                ...state,\n                isAuth: action.isAuth\n            }\n        default:\n            return state\n    }\n}\n\n\nexport type SetAuthACType = ReturnType<typeof setAuthAC>\nexport const setAuthAC = (email: string | null, id: number | null, login: string | null) => ({\n    type: \"SET-AUTH\",\n    email,\n    id,\n    login\n} as const)\n\nexport type SetIsAuthAT = ReturnType<typeof setIsAuthAC>\nexport const setIsAuthAC = (isAuth: boolean) => ({type: \"SET-IS-AUTH\", isAuth} as const)\n\nexport type SetLoginServerErrorAT = ReturnType<typeof setLoginServerErrorAC>\nexport const setLoginServerErrorAC = (error: string) => ({type: \"SET-LOGIN-SERVER-ERROR\", error} as const)\n\n\n///THUNK\n\nexport type AuthReducerThunkType = ThunkAction<any, AppStateType, unknown, AuthReducerActionType>\n\nexport const getAuthUserT = (): AuthReducerThunkType => (dispatch) => {\n    return authAPI.getAuthMe()\n        .then(response => {\n            if (response.resultCode === ResultCodeEnum.Success) {\n                const {email, id, login} = response.data\n                dispatch(setAuthAC(email, id, login))\n                dispatch(setIsAuthAC(true))\n            }\n        })\n}\n\nexport const loginT = (email: string, password: string, rememberMe: boolean = false): AuthReducerThunkType =>\n    (dispatch) => {\n        authAPI.login(email, password, false)\n            .then(response => {\n                if (response.resultCode === ResultCodeEnum.Success) {\n                    dispatch(getAuthUserT())\n                    dispatch(setLoginServerErrorAC(\"\"))\n                } else {\n                    dispatch(setLoginServerErrorAC(response.messages))\n                }\n            })\n    }\n\nexport const logOutT = (): AuthReducerThunkType => (dispatch) => {\n    authAPI.logOut()\n        .then(response => {\n            dispatch(setAuthAC(null, null, null))\n            dispatch(setIsAuthAC(false))\n        })\n}","import {useFormik} from \"formik\"\nimport React from \"react\"\nimport * as Yup from \"yup\"\nimport {Button, Paper, TextField} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginT} from \"../../Redux/Reducers/AuthReducer\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {Redirect} from \"react-router-dom\";\n\ntype LoginFormValues = {\n    email: string\n    pass: string\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isAuth = useSelector<AppStateType,boolean>(state => state.authUser.isAuth)\n\n    const loginError = useSelector<AppStateType,string | undefined>(state => state.authUser.loginServerError)\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            pass: \"\"\n        },\n        validationSchema: Yup.object({\n            email: Yup.string()\n                .email(\"Invalid email address\").required(\"Required\"),\n            pass: Yup.string()\n                .required(\"Required\"),\n        }),\n        onSubmit: (values: LoginFormValues) => {\n            dispatch(loginT(values.email, values.pass, false))\n        }\n    })\n    //Перенаправляем,если пользователь залогинен\n    if(isAuth){\n        return <Redirect to={'/profile'}/>\n    }\n    return (\n\n        <form onSubmit={formik.handleSubmit}>\n            <Paper sx={{\n                width: \"200px\",\n                padding: \"30px\",\n                display: \"grid\",\n                rowGap: \"20px\"\n            }}\n            >\n                <TextField\n                    label={\"Email\"}\n                    error={!!formik.errors.email}\n                    value={formik.values.email}\n                    onChange={formik.handleChange}\n                    name=\"email\"\n                    variant={\"outlined\"}\n                    size={\"small\"}\n                    helperText={formik.touched.email && formik.errors.email && formik.errors.email}\n                />\n                <TextField\n                    label={\"Pass\"}\n                    onChange={formik.handleChange}\n                    name=\"pass\"\n                    variant={\"outlined\"}\n                    size={\"small\"}\n                    type={\"password\"}\n                />\n                <Button variant={\"contained\"}\n                        type={\"submit\"}\n                >\n                    login\n                </Button>\n                {loginError && <div>{loginError}</div>}\n            </Paper>\n        </form>\n\n    )\n}","import React from \"react\";\nimport classes from './SideNav.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport {Drawer, List, ListItem, ListItemIcon} from \"@mui/material\";\nimport {Chat, Home, PeopleAlt} from \"@mui/icons-material\";\n\ntype  SideNavPropsType = {\n    isOpen: boolean\n    close: () => void\n}\n\nexport const SideNav = ({isOpen, close}: SideNavPropsType) => {\n    return (\n        <Drawer\n            anchor={\"left\"}\n            open={isOpen}\n            onClose={close}\n        >\n            <div className={classes.links}>\n                <List sx={{padding: \"20px\"}} onClick={close}>\n                    <ListItem sx={{mt: \"40px\"}}>\n                        <ListItemIcon>\n                            <Home/>\n                        </ListItemIcon>\n                        <NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemIcon>\n                            <PeopleAlt/>\n                        </ListItemIcon>\n                        <NavLink to=\"/users\" activeClassName={classes.activeLink}>Users</NavLink>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemIcon>\n                            <Chat/>\n                        </ListItemIcon>\n                        <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>Dialogs</NavLink>\n                    </ListItem>\n                </List>\n            </div>\n\n        </Drawer>\n    )\n}\n\nexport default SideNav","import React, {useEffect, useState} from \"react\";\nimport classes from \"./Header.module.css\"\nimport {AppBar, Button, Grid, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport MenuIcon from \"@mui/icons-material/Menu\"\nimport {Chat, Home, PeopleAlt} from \"@mui/icons-material\";\nimport {NavLink} from \"react-router-dom\";\nimport SideNav from \"../SideNav/SideNav\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {getAuthUserT, logOutT} from \"../../Redux/Reducers/AuthReducer\";\n\n\nexport const Header = () => {\n    const dispatch = useDispatch()\n    const userLogin = useSelector<AppStateType,string | null>(state => state.authUser.login)\n\n    const [isSideNavOpen, setSideNavOpen] = useState<boolean>(false)\n\n    const openSideNav = () => {\n        setSideNavOpen(true)\n    }\n\n    const closeSideNav = () => {\n        setSideNavOpen(false)\n    }\n\n    return (\n        <header className={classes.btn}>\n            <AppBar>\n                <Toolbar>\n                    <SideNav isOpen={isSideNavOpen} close={closeSideNav}/>\n                    <IconButton\n                        size={\"large\"}\n                        edge={\"start\"}\n                        color=\"inherit\"\n                        onClick={openSideNav}\n                    >\n                        <MenuIcon fontSize={\"large\"}/>\n                    </IconButton>\n\n                    <Typography\n                        variant={\"h6\"}\n                        component={\"span\"}\n                        sx={{flexGrow: 1}}\n                    >\n                        WebSocial\n                    </Typography>\n\n                    <Grid container sx={{ml: \"30px\"}}>\n                        <IconButton>\n                            <NavLink to=\"/profile\" activeClassName={classes.active}>\n                                <Home fontSize={\"large\"}/>\n                            </NavLink>\n                        </IconButton>\n\n                        <IconButton>\n                            <NavLink to=\"/users\" activeClassName={classes.active}>\n                                <PeopleAlt fontSize={\"large\"}/>\n                            </NavLink>\n\n                        </IconButton>\n\n                        <IconButton>\n                            <NavLink to=\"/dialogs\" activeClassName={classes.active}>\n                                <Chat fontSize={\"large\"}/>\n                            </NavLink>\n                        </IconButton>\n                    </Grid>\n\n                    {/*LoginName or LoginButton*/}\n                    {!userLogin\n                        ?\n                        <NavLink to={\"/login\"}>\n                            <Button variant={\"contained\"}\n                                    sx={{border: \"1px solid white\", color: \"white\"}}>\n                                Login\n                            </Button>\n                        </NavLink>\n                        :\n                        <>\n                            <Typography\n                                variant={\"h6\"}\n                                component={\"span\"}\n\n                            >\n                                {userLogin}\n                            </Typography>\n                            <Button variant={\"contained\"}\n                                    size={\"small\"}\n                                    onClick={() => dispatch(logOutT())}\n                                    sx={{border: \"1px solid white\", color: \"white\"}}\n                            >Out</Button>\n                        </>\n\n                    }\n\n                </Toolbar>\n            </AppBar>\n        </header>\n    )\n}\n","import {getAuthUserT} from \"./AuthReducer\";\n\nexport type AppInitState = {\n    initialised: boolean\n}\n\nconst initState: AppInitState = {\n    initialised: false\n}\n\nexport const appReducer = (state: AppInitState = initState, action: IsInitialisedAT) => {\n    switch (action.type) {\n        case \"IS-INITIALISED\":\n            return {\n                ...state,\n                initialised: true\n            }\n        default:\n            return state\n    }\n\n}\n\nexport type IsInitialisedAT = ReturnType<typeof isInitialisedAC>\nexport const isInitialisedAC = () => ({type: \"IS-INITIALISED\"})\n\n\n//THUNK\n\nexport const initialisedAppT = () => (dispatch: any) => {\n    dispatch(getAuthUserT())\n        .then(dispatch(isInitialisedAC()))\n}","import React, {useEffect} from \"react\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {Users} from \"./Components/Users/UsersContainer\";\nimport Profile from \"./Components/Profile/Profile\";\nimport {Container} from \"@mui/material\";\nimport {Dialogs} from \"./Components/Dialogs/Dialogs\";\nimport {Login} from \"./Components/Login/Login\";\nimport {Header} from \"./Components/Header/Header\";\nimport {getAuthUserT} from \"./Redux/Reducers/AuthReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./Redux/ReduxStore\";\nimport {Preloader} from \"./DefaultItems/Preloader/Preloader\";\nimport {initialisedAppT} from \"./Redux/Reducers/AppReducer\";\n\n\nexport const App = () => {\n    const dispatch = useDispatch()\n    const isInitialised = useSelector<AppStateType, boolean>(state => state.app.initialised)\n\n    useEffect(() => {\n        dispatch(initialisedAppT())\n    }, [])\n\n\n    if(!isInitialised){\n        return <Preloader/>\n    }\n    return (\n        <BrowserRouter>\n            <Header/>\n            <Container sx={{mt: \"5.5rem\"}}>\n                <main>\n                    <Route path=\"/profile/:userId?\" render={() => <Profile/>}/>\n                    <Route path=\"/dialogs\" render={() => <Dialogs/>}/>\n                    <Route path=\"/users\" render={() => <Users/>}/>\n                    <Route path=\"/login\" render={() => <Login/>}/>\n                </main>\n\n            </Container>\n\n        </BrowserRouter>\n\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"./Reducers/ProfileReducer\";\nimport {dialogsReducer} from \"./Reducers/DialogsReducer\";\nimport {usersReducer} from \"./Reducers/UsersReducer\";\nimport {authReducer} from \"./Reducers/AuthReducer\";\nimport thunkMiddle from 'redux-thunk'\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {appReducer} from \"./Reducers/AppReducer\";\n\nlet rootReducer = combineReducers({\n    app: appReducer,\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    authUser: authReducer\n})\n\n// type RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nlet store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunkMiddle)))\n\n// @ts-ignore\nwindow.store = store\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./Redux/ReduxStore\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/userDef.80d35342.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Header_btn__3Y7It\",\"active\":\"Header_active__2MpfG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"SideNav_links__2sbXd\",\"activeLink\":\"SideNav_activeLink__2nzJU\"};"],"sourceRoot":""}