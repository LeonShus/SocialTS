{"version":3,"sources":["Components/Profile/PrfileInfo/ProfileInfo.module.css","Components/Dialogs/DialogItem/DialogItem.module.css","Components/Header/Header.module.css","Components/SideNav/SideNav.module.css","DAL/API.ts","Components/Users/UsersCont.tsx","Redux/Reducers/UsersReducer.ts","DefaultItems/Paginator/Paginator.tsx","DefaultItems/Preloader/Preloader.tsx","Components/Users/Users.tsx","Redux/Reducers/AppReducer.ts","Redux/Reducers/ProfileReducer.ts","Components/Profile/PrfileInfo/Status/Status.tsx","Components/Profile/PrfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/Profile.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","HOC/WithAuth.tsx","Redux/Reducers/DialogsReducer.ts","Components/Dialogs/MessagesWindow/MessagesWindow.tsx","Components/Dialogs/Dialogs.tsx","Redux/Reducers/AuthReducer.ts","Components/Login/Login.tsx","Components/SideNav/SideNav.tsx","Components/Header/Header.tsx","App.tsx","reportWebVitals.ts","Redux/ReduxStore.ts","index.tsx","DefaultItems/Img/userDef.png"],"names":["module","exports","ResultCodeEnum","UsersCont","memo","followUserCallBack","unfollowUserCallBack","users","useSelector","state","usersPage","followInProgress","usersJsxArray","map","u","followButton","followed","Button","disabled","some","el","id","onClick","size","variant","Grid","item","xs","key","Paper","elevation","sx","p","maxWidth","flexGrow","mt","container","spacing","ButtonBase","width","height","position","top","to","Avatar","alt","name","undefined","src","photos","small","userDef","sm","direction","Typography","gutterBottom","component","fontSize","status","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","post","delete","profileAPI","userId","put","authAPI","email","password","rememberMe","initState","totalUsersCount","isFetching","setIsFetchingAC","type","setFollowProgressStartAC","setFollowProgressEndAC","Paginator","setCurrentPage","useState","page","setPage","pages","Math","ceil","Pagination","count","color","onChange","e","value","Preloader","className","Users","dispatch","useDispatch","useCallback","setCurrentPageAC","useEffect","items","totalCount","setUsersT","resultCode","Success","followAC","followUserT","unfollowAC","unfollowUserT","columns","initialised","fetching","isFetchingAC","user","postsData","v1","message","likeCount","setUserStatusAC","changeStatusT","Status","userStatus","profilePage","mainUserId","authUser","editStatus","setEditStatus","setStatus","TextField","autoFocus","onKeyPress","charCode","currentTarget","onBlur","onDoubleClick","ProfileInfo","border","mb","classes","avatar","fullName","ml","fontWeight","Post","props","padding","left","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","MyPosts","formik","useFormik","initialValues","newPost","validationSchema","Yup","max","onSubmit","values","trim","text","posts","handleSubmit","error","errors","helperText","multiline","rows","handleChange","Profile","params","useParams","userToRender","setUserStatusT","app","DialogItem","minWidth","navLinkStyle","Component","Message","wordWrap","backgroundColor","borderRadius","messages","MessagesWindow","messageArr","dialogsPage","newMessage","console","log","Dialogs","usersArr","margin","isAuth","login","loginServerError","setAuthAC","setIsAuthAC","setLoginServerErrorAC","getAuthUserT","finally","isInitialised","Login","loginError","pass","required","loginT","display","rowGap","label","touched","SideNav","isOpen","close","Drawer","anchor","open","onClose","links","List","ListItem","ListItemIcon","Home","PeopleAlt","Chat","Header","userLogin","isSideNavOpen","setSideNavOpen","btn","AppBar","Toolbar","IconButton","edge","App","Container","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","newMes","filter","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddle","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f6aaf10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__38kak\",\"container\":\"ProfileInfo_container__11Am1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLinkStyle\":\"DialogItem_navLinkStyle__2vftY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Header_btn__3Y7It\",\"active\":\"Header_active__2MpfG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"links\":\"SideNav_links__2sbXd\",\"activeLink\":\"SideNav_activeLink__2nzJU\"};","import axios from \"axios\";\nimport {UserPhotosType} from \"../Redux/Reducers/UsersReducer\";\nimport {ContactsType} from \"../Redux/Reducers/ProfileReducer\";\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"099be23b-024b-4d04-8aea-ded1a22de046\"\n    }\n})\n\nexport enum ResultCodeEnum {\n    Success = 0,\n    Error = 1\n}\n\ntype GetUsersType = {\n    items: Array<{\n        name: string\n        id: number\n        photos: UserPhotosType\n        status: string\n        followed: boolean\n    }>\n}\ntype FollowedUserType = {\n    resultCode: ResultCodeEnum\n    messages: Array<string>\n    data: any\n}\nexport const usersAPI = {\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\n        return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    followToUser(id: number) {\n        return instance.post<FollowedUserType>(`follow/${id}`)\n            .then(response => response.data)\n    },\n    unfollowUser(id: number) {\n        return instance.delete<FollowedUserType>(`follow/${id}`)\n            .then(response => response.data)\n    }\n}\n\ntype GetUserProfileType = {\n    aboutMe: null | string\n    contacts: ContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    fullName: string\n    userId: number\n    photos: UserPhotosType\n}\n\nexport const profileAPI = {\n    getUserProfile(id: number) {\n        return instance.get<GetUserProfileType>(`profile/${id}`)\n            .then(response => response.data)\n    },\n    getUserStatus(userId: number){\n        return instance.get(`profile/status/${userId}`)\n    },\n    changeStatus(status: string){\n        return instance.put('profile/status', {status})\n\n    }\n}\n\ntype GetAuthMeType = {\n    data: {\n        id: number\n        email: string\n        login: string\n    }\n    resultCode: ResultCodeEnum\n    messages: Array<string>\n}\n\nexport const authAPI = {\n    getAuthMe(){\n        return instance.get<GetAuthMeType>(`auth/me`)\n            .then(response => response.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false){\n        return instance.post(\"auth/login\", { email, password, rememberMe })\n            .then(response => response.data)\n    },\n    logOut(){\n        return instance.delete(\"auth/login\")\n    }\n}","import React, {memo} from \"react\";\nimport userDef from \"../../DefaultItems/Img/userDef.png\"\nimport Button from \"@mui/material/Button\";\nimport Avatar from \"@mui/material/Avatar\";\nimport ButtonBase from \"@mui/material/ButtonBase\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport Typography from \"@mui/material/Typography\";\nimport {NavLink} from \"react-router-dom\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {UserType} from \"../../Redux/Reducers/UsersReducer\";\n\n\nexport type UsersPropsType = {\n    followUserCallBack: (id: number) => void\n    unfollowUserCallBack: (id: number) => void\n}\n\nexport const UsersCont = memo(({followUserCallBack, unfollowUserCallBack}: UsersPropsType) => {\n    const users = useSelector<AppStateType, UserType[]>(state => state.usersPage.users)\n    const followInProgress = useSelector<AppStateType, number[]>(state => state.usersPage.followInProgress)\n\n\n    const usersJsxArray = users.map(u => {\n        const followButton = !u.followed\n            ? <Button disabled={followInProgress.some(el => el === u.id)}\n                      onClick={() => followUserCallBack(u.id)}\n                      size={\"small\"}\n                      variant=\"contained\">follow</Button>\n            : <Button disabled={followInProgress.some(el => el === u.id)}\n                      onClick={() => unfollowUserCallBack(u.id)}\n                      size={\"small\"}\n                      variant=\"contained\">Unfollow</Button>\n\n        return (\n            <Grid item xs={8} key={u.id}>\n                <Paper elevation={3} sx={{p: 2, maxWidth: 400, flexGrow: 1, mt: 2}}>\n                    <Grid container spacing={3}>\n\n                        <Grid item>\n                            <ButtonBase sx={{width: 80, height: 80, position: \"relative\", top: 10}}>\n                                <NavLink to={`/profile/${u.id}`}>\n                                    <Avatar alt={u.name ? u.name : undefined}\n                                            src={!u.photos.small ? userDef : u.photos.small}\n                                            sx={{width: 80, height: 80}}\n                                    />\n                                </NavLink>\n                            </ButtonBase>\n                        </Grid>\n\n                        <Grid item xs={12} sm container>\n                            <Grid item xs container direction=\"column\" spacing={2}>\n                                <Grid item xs>\n\n                                    <Typography\n                                        gutterBottom\n                                        variant={\"subtitle1\"}\n                                        component={\"div\"}\n                                        sx={{fontSize: \"1.3rem\"}}\n                                    >\n                                        {u.name}\n                                    </Typography>\n\n                                    <Typography variant={\"body2\"}>\n                                        {u.status}\n                                    </Typography>\n\n                                </Grid>\n                                <Grid item>\n                                    {followButton}\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </Grid>\n        )\n    })\n\n    return (\n        <>\n            {usersJsxArray}\n        </>\n    )\n})","import {ResultCodeEnum, usersAPI} from \"../../DAL/API\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"../ReduxStore\";\n\n\nexport type UserPhotosType = {\n    large: null | string\n    small: null | string\n}\n\nexport type UserType = {\n    followed: boolean | null\n    id: number\n    name: string | null\n    photos: UserPhotosType\n    status: string | null\n    uniqueUrlName: string | null\n}\n\nlet initState = {\n    users: [] as Array<UserType>,\n    totalUsersCount: 0,\n    pageSize: 10,\n    currentPage: 1,\n    isFetching: false,\n    followInProgress: [] as Array<number>\n}\n\ntype UsersReducerInitType = typeof initState\n\nexport type UsersReducerActionType =\n    FollowACT\n    | UnFollowACT\n    | SetUsersACT\n    | SetTotalUsersCountACT\n    | SetCurrentPageACT\n    | SetIsFetchingACT\n    | SetFollowProgressStartACT\n    | SetFollowProgressEndACT\n\nexport const usersReducer = (state: UsersReducerInitType = initState, action: UsersReducerActionType): UsersReducerInitType => {\n    switch (action.type) {\n        case \"USERS/FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(el => {\n                    return el.id === action.id ? {...el, followed: true} : el\n                })\n            }\n        case \"USERS/UNFOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(el => {\n                    return el.id === action.id ? {...el, followed: false} : el\n                })\n            }\n        case \"USERS/SET-USERS\":\n            return {...state, users: action.users}\n        case \"USERS/SET-TOTAL-USERS-COUNT\":\n            return {...state, totalUsersCount: action.totalUsersCount}\n        case \"USERS/SET-CURRENT-PAGE\":\n            return {...state, currentPage: action.currentPage}\n        case \"USERS/SET-IS-FETCHING\":\n            return {...state, isFetching: action.isFetching}\n        case \"USERS/SET-FOLLOW-PROGRESS-START\":\n            return {\n                ...state,\n                followInProgress: [...state.followInProgress, action.id]\n            }\n        case \"USERS/SET-FOLLOW-PROGRESS-END\":\n            return {\n                ...state,\n                followInProgress: state.followInProgress.filter(el => el !== action.id)\n            }\n        default :\n            return state\n    }\n}\n\n\nexport type FollowACT = ReturnType<typeof followAC>\nexport const followAC = (id: string | number) => ({type: \"USERS/FOLLOW\", id} as const)\n\nexport type UnFollowACT = ReturnType<typeof unfollowAC>\nexport const unfollowAC = (id: string | number) => ({type: \"USERS/UNFOLLOW\", id} as const)\n\nexport type SetUsersACT = ReturnType<typeof setUsersAC>\nexport const setUsersAC = (users: Array<UserType>) => ({type: \"USERS/SET-USERS\", users} as const)\n\nexport type SetTotalUsersCountACT = ReturnType<typeof setTotalUsersCountAC>\nexport const setTotalUsersCountAC = (totalUsersCount: number) => ({\n    type: \"USERS/SET-TOTAL-USERS-COUNT\",\n    totalUsersCount\n} as const)\n\nexport type SetCurrentPageACT = ReturnType<typeof setCurrentPageAC>\nexport const setCurrentPageAC = (currentPage: number) => ({type: \"USERS/SET-CURRENT-PAGE\", currentPage} as const)\n\nexport type SetIsFetchingACT = ReturnType<typeof setIsFetchingAC>\nexport const setIsFetchingAC = (isFetching: boolean) => ({type: \"USERS/SET-IS-FETCHING\", isFetching} as const)\n\nexport type SetFollowProgressStartACT = ReturnType<typeof setFollowProgressStartAC>\nexport const setFollowProgressStartAC = (id: number) => ({\n    type: \"USERS/SET-FOLLOW-PROGRESS-START\",\n    id\n} as const)\n\nexport type SetFollowProgressEndACT = ReturnType<typeof setFollowProgressEndAC>\nexport const setFollowProgressEndAC = (id: number) => ({type: \"USERS/SET-FOLLOW-PROGRESS-END\", id} as const)\n\n\n//THUNK\n\nexport type UserReducerThunkType = ThunkAction<any, AppStateType, unknown, UsersReducerActionType>\n\nexport const setUsersT = (currentPage: number, pageSize: number): UserReducerThunkType =>\n    (dispatch) => {\n        dispatch(setIsFetchingAC(true))\n\n        usersAPI.getUsers(currentPage, pageSize)\n            .then((response: any) => {\n                dispatch(setUsersAC(response.items))\n                dispatch(setTotalUsersCountAC(response.totalCount))\n                dispatch(setIsFetchingAC(false))\n            })\n    }\n\nexport const followUserT = (id: number): UserReducerThunkType =>\n    (dispatch) => {\n        dispatch(setFollowProgressStartAC(id))\n\n        usersAPI.followToUser(id)\n            .then(response => {\n                if (response.resultCode === ResultCodeEnum.Success) {\n                    dispatch(followAC(id))\n                }\n                dispatch(setFollowProgressEndAC(id))\n            })\n    }\n\nexport const unfollowUserT = (id: number): UserReducerThunkType =>\n    (dispatch) => {\n        dispatch(setFollowProgressStartAC(id))\n\n        usersAPI.unfollowUser(id)\n            .then(response => {\n                if (response.resultCode === ResultCodeEnum.Success) {\n                    dispatch(unfollowAC(id))\n                }\n                dispatch(setFollowProgressEndAC(id))\n            })\n    }\n","import React, {memo, useState} from \"react\"\nimport Pagination from \"@mui/material/Pagination\";\n\n\nexport type PaginatorPropsType = {\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    setCurrentPage: (currentPage: number) => void\n}\n\nexport const Paginator = memo(({totalUsersCount, pageSize, currentPage, setCurrentPage}: PaginatorPropsType) => {\n\n    const [page, setPage] = useState<number>(currentPage)\n\n    const pages = Math.ceil(totalUsersCount / pageSize)\n\n    const pageChangeHandler = (e: React.ChangeEvent<unknown>, value: number) => {\n        setPage(value)\n        setCurrentPage(value)\n    }\n\n\n    return (\n\n        <Pagination count={pages}\n                    variant={\"outlined\"}\n                    color=\"secondary\"\n                    page={page}\n                    onChange={pageChangeHandler}\n        />\n\n\n    )\n})","import React from \"react\"\nimport './Preloader.css'\n\nexport const Preloader = () => {\n    return (\n        <div className=\"middle\">\n            <div className=\"bar bar1\"></div>\n            <div className=\"bar bar2\"></div>\n            <div className=\"bar bar3\"></div>\n            <div className=\"bar bar4\"></div>\n            <div className=\"bar bar5\"></div>\n            <div className=\"bar bar6\"></div>\n            <div className=\"bar bar7\"></div>\n            <div className=\"bar bar8\"></div>\n        </div>\n    )\n}","import React, {memo, useCallback, useEffect} from \"react\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {UsersCont} from \"./UsersCont\";\nimport {followUserT, setCurrentPageAC, setUsersT, unfollowUserT} from \"../../Redux/Reducers/UsersReducer\";\nimport {Paginator} from \"../../DefaultItems/Paginator/Paginator\";\nimport {Preloader} from \"../../DefaultItems/Preloader/Preloader\";\nimport Grid from \"@mui/material/Grid\";\n\n\nexport const Users = memo(() => {\n    const dispatch = useDispatch()\n    const isFetching = useSelector<AppStateType,boolean>(state => state.usersPage.isFetching)\n    const totalUsersCount = useSelector<AppStateType,number>(state => state.usersPage.totalUsersCount)\n    const pageSize = useSelector<AppStateType,number>(state => state.usersPage.pageSize)\n    const currentPage = useSelector<AppStateType,number>(state => state.usersPage.currentPage)\n\n    const setCurrentPage = useCallback((page: number) => {\n        dispatch(setCurrentPageAC(page))\n    },[dispatch])\n\n    //Получаем пользователей\n    useEffect(() => {\n        dispatch(setUsersT(currentPage, pageSize))\n    }, [dispatch, currentPage, pageSize])\n\n    //Подписываемся на поьзователя\n    const followUserCallBack = useCallback((id: number) => {\n        dispatch(followUserT(id))\n    },[dispatch])\n    //Отписываемся от пользователя\n    const unfollowUserCallBack = useCallback((id: number) => {\n        dispatch(unfollowUserT(id))\n    },[dispatch])\n\n    return (\n        <>\n            {isFetching && <Preloader/>}\n            <Paginator totalUsersCount={totalUsersCount}\n                       pageSize={pageSize}\n                       currentPage={currentPage}\n                       setCurrentPage={setCurrentPage}\n            />\n\n\n            <Grid container spacing={2} columns={16}>\n                <UsersCont followUserCallBack={followUserCallBack}\n                                unfollowUserCallBack={unfollowUserCallBack}\n                />\n            </Grid>\n        </>\n    )\n})\n","export type AppInitState = {\n    initialised: boolean\n    fetching: boolean\n}\n\nconst initState: AppInitState = {\n    initialised: false,\n    fetching: false\n}\n\ntype ActionType = IsFetchingAT | IsInitialisedAT\n\nexport const appReducer = (state: AppInitState = initState, action: ActionType) => {\n    switch (action.type) {\n        case \"APP-REDUCER/IS-INITIALISED\":\n            return {\n                ...state,\n                initialised: action.isInitialised\n            }\n        case \"APP-REDUCER/IS-FETCHING\":\n            return {\n                ...state,\n                fetching: action.isFetching\n            }\n        default:\n            return state\n    }\n\n}\n\nexport type IsInitialisedAT = ReturnType<typeof isInitialisedAC>\nexport const isInitialisedAC = (isInitialised: boolean) => ({type: \"APP-REDUCER/IS-INITIALISED\", isInitialised} as const)\n\nexport type IsFetchingAT = ReturnType<typeof isFetchingAC>\nexport const isFetchingAC = (isFetching: boolean) => ({type: \"APP-REDUCER/IS-FETCHING\", isFetching} as const)\n","import {v1} from \"uuid\";\nimport {UserPhotosType} from \"./UsersReducer\";\nimport {profileAPI} from \"../../DAL/API\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"../ReduxStore\";\nimport {isFetchingAC} from \"./AppReducer\";\n\nexport type PostDataType = {\n    id: string | number\n    message: string\n    likeCount: number\n}\n\nexport type ContactsType = {\n    facebook: null | string\n    website: null | string\n    vk: null | string\n    twitter: null | string\n    instagram: null | string\n    youtube: null | string\n    github: null | string\n    mainLink: null | string\n}\nexport type UserType = {\n    aboutMe: null | string\n    contacts: ContactsType\n    lookingForAJob: boolean\n    lookingForAJobDescription: null | string\n    fullName: string\n    userId: number\n    photos: UserPhotosType\n}\n\nlet initState = {\n    user: {} as UserType,\n    status: \"\",\n    postsData: [\n        {id: v1(), message: \"Hello, Boy\", likeCount: 10},\n        {id: v1(), message: \"Boy\", likeCount: 33},\n        {id: v1(), message: \"Sup\", likeCount: 21},\n    ] as Array<PostDataType>,\n}\n\nexport type ProfileInitStateType = typeof initState\n\ntype ProfileReducerActionType = AddNewPostACT | SetUserToProfilePageACT | SetUserStatusACT\n\nexport const profileReducer = (state: ProfileInitStateType = initState, action: ProfileReducerActionType): ProfileInitStateType => {\n    switch (action.type) {\n        case \"PROFILE/ADD-NEW-POST\":\n            let newPost: PostDataType = {\n                id: v1(),\n                message: action.text,\n                likeCount: 0\n            }\n            return {\n                ...state,\n                postsData: [...state.postsData, newPost]\n            }\n        case \"PROFILE/SET-USER-TO-PROFILE-PAGE\":\n            return {\n                ...state,\n                user: action.user\n            }\n        case \"PROFILE/SET-USER-STATUS\":\n            return {\n                ...state,\n                status: action.status\n            }\n        default :\n            return state\n    }\n}\n\nexport type AddNewPostACT = ReturnType<typeof addNewPostAC>\nexport const addNewPostAC = (text: string) => ({type: \"PROFILE/ADD-NEW-POST\", text: text} as const)\n\nexport type SetUserToProfilePageACT = ReturnType<typeof setUserToProfilePageAC>\nexport const setUserToProfilePageAC = (user: UserType) => ({\n    type: \"PROFILE/SET-USER-TO-PROFILE-PAGE\",\n    user\n} as const)\n\nexport type SetUserStatusACT = ReturnType<typeof setUserStatusAC>\nexport const setUserStatusAC = (status: string) => ({type: \"PROFILE/SET-USER-STATUS\", status} as const)\n\n//THUNK\n\nexport type ProfileReducerThunkType = ThunkAction<any, AppStateType, unknown, ProfileReducerActionType>\n\nexport const setProfileT = (userId: number): ProfileReducerThunkType => (dispatch: any) => {\n    dispatch(isFetchingAC(true))\n    profileAPI.getUserProfile(userId)\n        .then(response => {\n            dispatch(setUserToProfilePageAC(response))\n            dispatch(isFetchingAC(false))\n        })\n}\n\nexport const setUserStatusT = (userId: number): ProfileReducerThunkType => (dispatch) => {\n    return profileAPI.getUserStatus(userId)\n        .then(response => {\n            if (response.status === 200) {\n                dispatch(setUserStatusAC(response.data))\n            }\n        })\n}\n\nexport const changeStatusT = (status: string): ProfileReducerThunkType => (dispatch) => {\n    profileAPI.changeStatus(status)\n        .then(response => {\n            if (response.status === 200) {\n                dispatch(setUserStatusAC(status))\n            }\n        })\n}","import React, {ChangeEvent, useState} from \"react\"\nimport {Grid, TextField, Typography} from \"@mui/material\";\nimport {changeStatusT, UserType} from \"../../../../Redux/Reducers/ProfileReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../../Redux/ReduxStore\";\n\ntype StatusPropsType = {\n    user: UserType\n}\n\nexport const Status = ({user}: StatusPropsType) => {\n    const userStatus = useSelector<AppStateType, string>(state => state.profilePage.status)\n    let mainUserId = useSelector<AppStateType, number | null>(state => state.authUser.id)\n\n    const [editStatus, setEditStatus] = useState(false)\n    const [status, setStatus] = useState(userStatus)\n\n    const dispatch = useDispatch()\n\n    const editModeOn = () => {\n        mainUserId === user.userId &&\n        setEditStatus(true)\n    }\n    const editModeOff = (e: any) => {\n        if (e.charCode === 13) {\n            setEditStatus(false)\n            dispatch(changeStatusT(status))\n        }\n    }\n\n    const onBlurHandler = () => {\n        setEditStatus(false)\n        dispatch(changeStatusT(status))\n    }\n\n    const changeStatusText = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <Grid container>\n            {editStatus\n                ? <TextField autoFocus\n                             size={\"small\"}\n                             variant={\"outlined\"}\n                             onKeyPress={editModeOff}\n                             onChange={changeStatusText}\n                             onBlur={onBlurHandler}\n                />\n\n                : <Typography\n                    onDoubleClick={editModeOn}\n                    sx={{fontSize: \"1.2rem\"}}\n                >\n                    {userStatus}\n                </Typography>\n            }\n        </Grid>\n    )\n}","import classes from \"./ProfileInfo.module.css\";\nimport userDef from \"../../../DefaultItems/Img/userDef.png\";\nimport React, {memo} from \"react\";\nimport {UserType} from \"../../../Redux/Reducers/ProfileReducer\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport {Status} from \"./Status/Status\";\n\ntype ProfileInfoPropsType = {\n    user: UserType\n}\n\nexport const ProfileInfo = memo(({user}: ProfileInfoPropsType) => {\n\n    const getUserPhoto = () => {\n        return user.photos && user.photos.small ? user.photos.small : userDef\n    }\n\n    return (\n        <Grid container\n              sx={{\n                  border: \"1px solid black\",\n                  mb: \"40px\"\n              }}\n        >\n            <Grid item>\n                <Avatar className={classes.avatar}\n                        src={getUserPhoto()}\n                        alt={user.fullName}\n                        sx={{width: \"150px\", height: \"150px\"}}\n                />\n            </Grid>\n            <Grid item\n                  sx={{ml: \"20px\"}}\n            >\n                <Typography sx={{fontSize: \"2.2rem\", fontWeight: \"300\"}}>\n                    {user.fullName}\n                </Typography>\n\n                <Status user={user}/>\n            </Grid>\n\n\n        </Grid>\n    )\n})","import React from \"react\";\nimport userDef from \"../../../../DefaultItems/Img/userDef.png\"\nimport {Avatar, Checkbox, Grid, Paper, Typography} from \"@mui/material\";\nimport {Favorite, FavoriteBorder} from \"@mui/icons-material\";\n\ntype PostPropsType = {\n    message: string\n    likeCount: number\n}\n\nexport const Post = (props: PostPropsType) => {\n    return (\n        <Paper elevation={3}\n               sx={{mt: \"10px\"}}\n        >\n            <Grid container\n                  sx={{\n                      padding: \"15px\",\n                      width: '500px'\n                  }}\n            >\n                <Grid item>\n                    <Avatar src={userDef}\n                            alt=\"avatar\"\n                            sx={{ height: '60px', width: '60px' }}\n                    />\n                </Grid>\n                <Grid item>\n                        <Typography variant={\"body1\"}\n                                    sx={{ml: \"15px\"}}\n                        >\n                            NAME\n                        </Typography>\n\n                        <Typography variant={\"body1\"}\n                                    sx={{ml: \"15px\"}}\n                        >\n                            {props.message}\n                        </Typography>\n                </Grid>\n\n                <Grid container\n                      sx={{\n                          position: \"relative\",\n                          left: \"-15px\",\n                          top: \"18px\"\n                      }}\n                >\n                    <Checkbox icon={<FavoriteBorder/>}\n                              checkedIcon={<Favorite/>}\n                              sx={{\n                                  color: \"gray\",\n                                  \"&.Mui-checked\": {\n                                      color: \"red\"\n                                  }\n                              }}\n                    />\n                    <Typography sx={{\n                        position: \"relative\",\n                        left: \"-8px\",\n                        top: \"8px\"\n                    }}>\n                        {props.likeCount}\n                    </Typography>\n\n                </Grid>\n            </Grid>\n        </Paper>\n\n    )\n}\n\n","import React, {memo} from \"react\";\nimport {Post} from \"./Post/Post\";\nimport Button from \"@mui/material/Button\";\nimport Grid from \"@mui/material/Grid\";\nimport TextField from \"@mui/material/TextField\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/ReduxStore\";\nimport {addNewPostAC, PostDataType} from \"../../../Redux/Reducers/ProfileReducer\";\nimport {useFormik} from \"formik\";\nimport * as Yup from \"yup\";\n\n\nexport const MyPosts = memo(() => {\n    const dispatch = useDispatch()\n    const postsData = useSelector<AppStateType, PostDataType[]>(state => state.profilePage.postsData)\n\n    const addPost = (post: string) => {\n        if (post.trim()) {   //Перед добавлением проверяем на пустую строку\n            dispatch(addNewPostAC(post.trim()))\n        }\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            newPost: \"\",\n        },\n        validationSchema: Yup.object({\n            newPost: Yup.string()\n                .max(5, \"Max chars 5\")\n        }),\n        onSubmit: values => {\n            addPost(values.newPost)\n        }\n    })\n\n    let posts = postsData.map((el) => <Post key={el.id} message={el.message} likeCount={el.likeCount}/>)\n\n    return (\n        <Grid container>\n            <Grid item>\n                <form onSubmit={formik.handleSubmit}>\n                    <TextField\n                        name={\"newPost\"}\n                        error={!!formik.errors.newPost}\n                        helperText={!!formik.errors.newPost && formik.errors.newPost}\n                        multiline\n                        rows={4}\n                        onChange={formik.handleChange}\n                        value={formik.values.newPost}\n                    />\n                    <Button type={\"submit\"} variant=\"contained\">Send</Button>\n                </form>\n            </Grid>\n\n            <Grid container>\n                <Grid item>\n                    {posts}\n                </Grid>\n            </Grid>\n\n\n        </Grid>\n    )\n})","import React, {memo, useEffect} from \"react\";\nimport {ProfileInfo} from \"./PrfileInfo/ProfileInfo\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setProfileT, setUserStatusT, UserType} from \"../../Redux/Reducers/ProfileReducer\";\nimport {Preloader} from \"../../DefaultItems/Preloader/Preloader\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport {MyPosts} from \"./MyPosts/MyPosts\";\nimport {useParams} from \"react-router-dom\";\n\n\nexport const Profile = memo(() => {\n    let dispatch = useDispatch()\n    let mainUserId = useSelector<AppStateType, number | null>(state => state.authUser.id)\n    let user = useSelector<AppStateType, UserType>((state: AppStateType) => state.profilePage.user)\n\n    let params = useParams()\n    let userToRender = params.userId && +params.userId\n\n    useEffect(() => {\n        if (userToRender) {\n            dispatch(setProfileT(userToRender))\n            dispatch(setUserStatusT(userToRender))\n        }\n    }, [dispatch, userToRender, mainUserId])\n\n\n    let isFetching = useSelector<AppStateType, boolean>(state => state.app.fetching)\n    if (isFetching) {\n        return <Preloader/>\n    }\n\n    return (\n        <Paper>\n            <Grid container\n                  sx={{padding: \"20px\"}}\n            >\n                <ProfileInfo user={user}/>\n                <MyPosts/>\n            </Grid>\n        </Paper>\n    )\n})","import React from \"react\";\nimport classes from \"./DialogItem.module.css\";\nimport userDef from \"../../../DefaultItems/Img/userDef.png\";\nimport {NavLink} from \"react-router-dom\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: string | number\n}\n\nexport const DialogItem = (props: DialogItemPropsType) => {\n\n\n    return (\n        <Paper sx={{minWidth: \"200px\", mb: \"15px\"}}\n               elevation={3}\n        >\n            <Grid container sx={{padding: \"10px\"}} spacing={1}>\n                <Grid item>\n                    <Avatar alt={props.name} src={userDef}/>\n                </Grid>\n                <Grid item>\n                    <NavLink className={classes.navLinkStyle} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n                </Grid>\n            </Grid>\n        </Paper>\n\n    )\n}","import Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport React from \"react\";\n\ntype MessagePropsType = {\n    message: string\n}\n\nconst Message: React.FC<MessagePropsType> = (props) => {\n    return (\n        <Grid container\n              sx={{\n                  mb: \"7px\",\n                  padding: \"2px\",\n                  maxWidth: \"300px\",\n                  wordWrap: \"break-word\",\n              }}\n        >\n            <Grid item>\n                <Typography variant={\"body1\"}\n                            sx={{\n                                color: 'white',\n                                backgroundColor: \"#1976D2\",\n                                padding: \"7px\",\n                                borderRadius: '5px'\n                            }}>\n                    {props.message}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Message","import React, {ComponentType} from \"react\"\nimport {useSelector} from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport {AppStateType} from \"../Redux/ReduxStore\";\n\nexport function WithAuthHOC<T>(Component: ComponentType<T>) {\n\n    const ComponentWithAuth = (props: any) => {\n        let isAuth = useSelector((state: AppStateType) => state.authUser.isAuth)\n\n        if (!isAuth) {\n            return <Navigate to={\"/login\"}/>\n        }\n        return <Component {...props}/>\n    }\n    return ComponentWithAuth\n}","import {v1} from \"uuid\"\n\nexport type MessageType = {\n    id: string | number\n    message: string\n}\nexport type UsersType = {\n    id: string | number\n    name: string\n}\n\nconst initState = {\n    messages: [\n        {id: v1(), message: \"Hi, bro!\"},\n        {id: v1(), message: \"GL!\"},\n        {id: v1(), message: \"Bye;)\"},\n    ] as Array<MessageType>,\n\n    users: [\n        {id: v1(), name: \"Leon\"},\n        {id: v1(), name: \"Alex\"},\n        {id: v1(), name: \"Bob\"}\n    ] as Array<UsersType>,\n}\n\nexport type DialogsInitStateType = typeof initState\n\ntype DialogsReducerActionType = SendNewMessageACT\n\nexport const dialogsReducer = (state: DialogsInitStateType = initState, action: DialogsReducerActionType) => {\n    switch (action.type) {\n        case \"DIALOGS/ADD-NEW-MESSAGE\":\n            const newMes: MessageType = {\n                id: v1(),\n                message: action.text\n            }\n            return {\n                ...state,\n                messages: [...state.messages, newMes]\n            }\n        default:\n            return state\n    }\n}\n\ntype SendNewMessageACT = ReturnType<typeof sendNewMessageAC>\nexport const sendNewMessageAC = (text: string) => ({\n    type: \"DIALOGS/ADD-NEW-MESSAGE\",\n    text\n} as const)","import React, {memo} from \"react\"\nimport Grid from \"@mui/material/Grid\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport Message from \"../Message/Message\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/ReduxStore\";\nimport {MessageType, sendNewMessageAC} from \"../../../Redux/Reducers/DialogsReducer\";\nimport {useFormik} from \"formik\";\nimport * as Yup from \"yup\";\n\n\n//Убрать лишние перерисовки\nexport const MessagesWindow = memo(() => {\n\n    const dispatch = useDispatch()\n\n    const send = (newMessage: string) => {\n        dispatch(sendNewMessageAC(newMessage))\n    }\n\n    const messages = useSelector<AppStateType, MessageType[]>(state => state.dialogsPage.messages)\n\n    const messageArr = messages.map((el) => <Message key={el.id} message={el.message}/>)\n\n    const formik = useFormik({\n        initialValues: {\n            message: \"\",\n        },\n        validationSchema: Yup.object({\n            message: Yup.string()\n                .max(10, \"Max chars 10\")\n\n        }),\n        onSubmit: values => {\n            send(values.message)\n        }\n    })\n\n    console.log(\"MessagesWindow\")\n    return (\n        <>\n            <Grid container\n                  sx={{\n                      padding: \"20px\",\n                      border: \"2px solid gray\",\n                      borderRadius: \"5px\",\n                      mb: \"10px\"\n                  }}>\n                {messageArr}\n            </Grid>\n            {/*Send item*/}\n            <Grid item>\n                <form onSubmit={formik.handleSubmit}>\n                    <TextField\n                        multiline\n                        name={\"message\"}\n                        error={!!formik.errors.message}\n                        helperText={!!formik.errors.message && formik.errors.message}\n                        onChange={formik.handleChange}\n                        rows={4}\n                        value={formik.values.message}\n\n                    />\n                    <Button type={\"submit\"}\n                            size={\"small\"}\n                            variant=\"contained\"\n                    >\n                        Send\n                    </Button>\n                </form>\n            </Grid>\n        </>\n    )\n})","import React, {memo} from \"react\";\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {UsersType} from \"../../Redux/Reducers/DialogsReducer\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {WithAuthHOC} from \"../../HOC/WithAuth\";\nimport {MessagesWindow} from \"./MessagesWindow/MessagesWindow\";\n\nexport const Dialogs = memo(WithAuthHOC(() => {\n\n    const users = useSelector<AppStateType, UsersType[]>(state => state.dialogsPage.users)\n\n    const usersArr = users.map((el) => <DialogItem key={el.id} name={el.name} id={el.id}/>)\n\n\n    return (\n\n        <Grid container>\n            {/*Users Container*/}\n            <Grid\n                item\n                sx={{margin: \"8px 20px 0 10px\"}}\n            >\n                {usersArr}\n            </Grid>\n\n            {/*Dialog Window*/}\n            <Paper elevation={3}>\n                <Grid item\n                      sx={{\n                          width: \"500px\",\n                          padding: \"20px\"\n                      }}\n                >\n                    {/*Messages window*/}\n                    <MessagesWindow/>\n\n                </Grid>\n            </Paper>\n\n        </Grid>\n\n    )\n}))","import {authAPI, ResultCodeEnum} from \"../../DAL/API\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"../ReduxStore\";\nimport {isInitialisedAC} from \"./AppReducer\";\n\nexport type AuthStateType = {\n    id: null | number\n    email: null | string\n    login: null | string\n    isAuth: boolean\n    loginServerError?: string\n}\n\nconst initState: AuthStateType = {\n    email: null,\n    id: null,\n    login: null,\n    isAuth: false,\n    loginServerError: \"\"\n}\n\ntype AuthReducerActionType = SetAuthACType | SetLoginServerErrorAT | SetIsAuthAT\n\nexport const authReducer = (state: AuthStateType = initState, action: AuthReducerActionType): AuthStateType => {\n    switch (action.type) {\n        case \"AUTH/SET-AUTH\":\n            return {\n                ...state,\n                email: action.email,\n                login: action.login,\n                id: action.id\n            }\n        case \"AUTH/SET-LOGIN-SERVER-ERROR\":\n            return {\n                ...state,\n                loginServerError: action.error\n            }\n        case \"AUTH/SET-IS-AUTH\":\n            return {\n                ...state,\n                isAuth: action.isAuth\n            }\n        default:\n            return state\n    }\n}\n\n\nexport type SetAuthACType = ReturnType<typeof setAuthAC>\nexport const setAuthAC = (email: string | null, id: number | null, login: string | null) => ({\n    type: \"AUTH/SET-AUTH\",\n    email,\n    id,\n    login\n} as const)\n\nexport type SetIsAuthAT = ReturnType<typeof setIsAuthAC>\nexport const setIsAuthAC = (isAuth: boolean) => ({type: \"AUTH/SET-IS-AUTH\", isAuth} as const)\n\nexport type SetLoginServerErrorAT = ReturnType<typeof setLoginServerErrorAC>\nexport const setLoginServerErrorAC = (error: string) => ({type: \"AUTH/SET-LOGIN-SERVER-ERROR\", error} as const)\n\n\n///THUNK\n\nexport type AuthReducerThunkType = ThunkAction<any, AppStateType, unknown, AuthReducerActionType>\n\nexport const getAuthUserT = (): AuthReducerThunkType => (dispatch: any) => {\n    authAPI.getAuthMe()\n        .then(response => {\n            console.log(response)\n            if (response.resultCode === ResultCodeEnum.Success) {\n                const {email, id, login} = response.data\n                dispatch(setAuthAC(email, id, login))\n                dispatch(setIsAuthAC(true))\n            }\n        })\n        .finally(() => {\n            dispatch(isInitialisedAC(true))\n        })\n}\n\nexport const loginT = (email: string, password: string, rememberMe: boolean = false): AuthReducerThunkType =>\n    (dispatch) => {\n        authAPI.login(email, password, false)\n            .then(response => {\n                if (response.resultCode === ResultCodeEnum.Success) {\n                    dispatch(getAuthUserT())\n                    dispatch(setLoginServerErrorAC(\"\"))\n                } else {\n                    dispatch(setLoginServerErrorAC(response.messages))\n                }\n            })\n    }\n\nexport const logOutT = (): AuthReducerThunkType => (dispatch) => {\n    authAPI.logOut()\n        .then(response => {\n            dispatch(setAuthAC(null, null, null))\n            dispatch(setIsAuthAC(false))\n        })\n}","import {useFormik} from \"formik\"\nimport React, {memo} from \"react\"\nimport * as Yup from \"yup\"\nimport Button from \"@mui/material/Button\";\nimport Paper from \"@mui/material/Paper\";\nimport TextField from \"@mui/material/TextField\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginT} from \"../../Redux/Reducers/AuthReducer\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {Navigate} from \"react-router-dom\";\n\ntype LoginFormValues = {\n    email: string\n    pass: string\n}\n\nexport const Login = memo(() => {\n    const dispatch = useDispatch()\n    const isAuth = useSelector<AppStateType, boolean>(state => state.authUser.isAuth)\n    let mainUserId = useSelector<AppStateType, number | null>(state => state.authUser.id)\n\n    const loginError = useSelector<AppStateType, string | undefined>(state => state.authUser.loginServerError)\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            pass: \"\"\n        },\n        validationSchema: Yup.object({\n            email: Yup.string()\n                .email(\"Invalid email address\").required(\"Required\"),\n            pass: Yup.string()\n                .required(\"Required\"),\n        }),\n        onSubmit: (values: LoginFormValues) => {\n            dispatch(loginT(values.email, values.pass, false))\n        }\n    })\n    //Перенаправляем,если пользователь залогинен\n    if (isAuth) {\n        return <Navigate to={`/profile/${mainUserId}`}/>\n    }\n    return (\n\n        <form onSubmit={formik.handleSubmit}>\n            <Paper sx={{\n                width: \"200px\",\n                padding: \"30px\",\n                display: \"grid\",\n                rowGap: \"20px\"\n            }}\n            >\n                <TextField\n                    label={\"Email\"}\n                    error={!!formik.errors.email}\n                    value={formik.values.email}\n                    onChange={formik.handleChange}\n                    name=\"email\"\n                    variant={\"outlined\"}\n                    size={\"small\"}\n                    helperText={formik.touched.email && formik.errors.email && formik.errors.email}\n                />\n                <TextField\n                    label={\"Pass\"}\n                    onChange={formik.handleChange}\n                    name=\"pass\"\n                    variant={\"outlined\"}\n                    size={\"small\"}\n                    type={\"password\"}\n                />\n                <Button variant={\"contained\"}\n                        type={\"submit\"}\n                >\n                    login\n                </Button>\n                {loginError && <div>{loginError}</div>}\n            </Paper>\n        </form>\n\n    )\n})","import React from \"react\";\nimport classes from './SideNav.module.css'\nimport {NavLink} from \"react-router-dom\";\nimport Drawer from \"@mui/material/Drawer\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport {Chat, Home, PeopleAlt} from \"@mui/icons-material\";\n\ntype  SideNavPropsType = {\n    isOpen: boolean\n    close: () => void\n}\n\nexport const SideNav = ({isOpen, close}: SideNavPropsType) => {\n    return (\n        <Drawer\n            anchor={\"left\"}\n            open={isOpen}\n            onClose={close}\n        >\n            <div className={classes.links}>\n                <List sx={{padding: \"20px\"}} onClick={close}>\n                    <ListItem sx={{mt: \"40px\"}}>\n                        <ListItemIcon>\n                            <Home/>\n                        </ListItemIcon>\n                        <NavLink to=\"/profile\">Profile</NavLink>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemIcon>\n                            <PeopleAlt/>\n                        </ListItemIcon>\n                        <NavLink to=\"/users\">Users</NavLink>\n                    </ListItem>\n                    <ListItem>\n                        <ListItemIcon>\n                            <Chat/>\n                        </ListItemIcon>\n                        <NavLink to=\"/dialogs\">Dialogs</NavLink>\n                    </ListItem>\n                </List>\n            </div>\n\n        </Drawer>\n    )\n}\n\nexport default SideNav","import React, {memo, useState} from \"react\";\nimport classes from \"./Header.module.css\"\nimport AppBar from \"@mui/material/AppBar\"\nimport Button from \"@mui/material/Button\"\nimport Grid from \"@mui/material/Grid\"\nimport IconButton from \"@mui/material/IconButton\"\nimport Toolbar from \"@mui/material/Toolbar\"\nimport Typography from \"@mui/material/Typography\"\nimport MenuIcon from \"@mui/icons-material/Menu\"\nimport {Chat, Home, PeopleAlt} from \"@mui/icons-material\";\nimport {NavLink} from \"react-router-dom\";\nimport SideNav from \"../SideNav/SideNav\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/ReduxStore\";\nimport {logOutT} from \"../../Redux/Reducers/AuthReducer\";\n\n\nexport const Header = memo(() => {\n    const dispatch = useDispatch()\n    const userLogin = useSelector<AppStateType, string | null>(state => state.authUser.login)\n\n    let mainUserId = useSelector<AppStateType, number | null>(state => state.authUser.id)\n\n    const [isSideNavOpen, setSideNavOpen] = useState<boolean>(false)\n\n    const openSideNav = () => {\n        setSideNavOpen(true)\n    }\n\n    const closeSideNav = () => {\n        setSideNavOpen(false)\n    }\n\n    const btnLogOut = () => {\n        dispatch(logOutT())\n    }\n\n    return (\n        <header className={classes.btn}>\n            <AppBar>\n                <Toolbar>\n                    <SideNav isOpen={isSideNavOpen} close={closeSideNav}/>\n                    <IconButton\n                        size={\"large\"}\n                        edge={\"start\"}\n                        color=\"inherit\"\n                        onClick={openSideNav}\n                    >\n                        <MenuIcon fontSize={\"large\"}/>\n                    </IconButton>\n\n                    <Typography\n                        variant={\"h6\"}\n                        component={\"span\"}\n                        sx={{flexGrow: 1}}\n                    >\n                        WebSocial\n                    </Typography>\n\n                    <Grid container sx={{ml: \"30px\"}}>\n                        <IconButton>\n                            {mainUserId\n                                ?\n                                <NavLink to={`/profile/${mainUserId}`}>\n                                    <Home fontSize={\"large\"}/>\n                                </NavLink>\n                                :\n                                <NavLink to={`/login`}>\n                                    <Home fontSize={\"large\"}/>\n                                </NavLink>\n                            }\n                        </IconButton>\n\n                        <IconButton>\n                            <NavLink to=\"/users\">\n                                <PeopleAlt fontSize={\"large\"}/>\n                            </NavLink>\n\n                        </IconButton>\n\n                        <IconButton>\n                            <NavLink to=\"/dialogs\">\n                                <Chat fontSize={\"large\"}/>\n                            </NavLink>\n                        </IconButton>\n                    </Grid>\n\n                    {/*LoginName or LoginButton*/}\n                    {!userLogin\n                        ?\n                        <NavLink to={\"/login\"}>\n                            <Button variant={\"contained\"}\n                                    sx={{border: \"1px solid white\", color: \"white\"}}>\n                                Login\n                            </Button>\n                        </NavLink>\n                        :\n                        <>\n                            <Typography\n                                variant={\"h6\"}\n                                component={\"span\"}\n\n                            >\n                                {userLogin}\n                            </Typography>\n                            <Button variant={\"contained\"}\n                                    size={\"small\"}\n                                    onClick={btnLogOut}\n                                    sx={{border: \"1px solid white\", color: \"white\"}}\n                            >Out</Button>\n                        </>\n\n                    }\n\n                </Toolbar>\n            </AppBar>\n        </header>\n    )\n})\n","import React, {useEffect} from \"react\";\nimport {HashRouter, Navigate, Route, Routes} from \"react-router-dom\";\nimport {Users} from \"./Components/Users/Users\";\nimport {Profile} from \"./Components/Profile/Profile\";\nimport Container from \"@mui/material/Container\";\nimport {Dialogs} from \"./Components/Dialogs/Dialogs\";\nimport {Login} from \"./Components/Login/Login\";\nimport {Header} from \"./Components/Header/Header\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./Redux/ReduxStore\";\nimport {Preloader} from \"./DefaultItems/Preloader/Preloader\";\nimport {getAuthUserT} from \"./Redux/Reducers/AuthReducer\";\n\n\nexport const App = () => {\n    const dispatch = useDispatch()\n    const isInitialised = useSelector<AppStateType, boolean>(state => state.app.initialised)\n\n    // const isAuth = useSelector<AppStateType, boolean>(state => state.authUser.isAuth)\n\n\n    useEffect(() => {\n        dispatch(getAuthUserT())\n    }, [dispatch])\n\n\n    if (!isInitialised) {\n        return <Preloader/>\n    }\n\n    console.log('APP')\n    return (\n        <HashRouter>\n            <Header/>\n            <Container sx={{mt: \"5.5rem\"}}>\n                <main>\n                    <Routes>\n                        <Route path=\"/\" element={<Navigate to={\"/login\"}/>}/>\n                        <Route path=\"/profile/:userId\" element={<Profile/>}/>\n                        <Route path=\"/dialogs\" element={<Dialogs/>}/>\n                        <Route path=\"/users\" element={<Users/>}/>\n                        <Route path=\"/login\" element={<Login/>}/>\n                    </Routes>\n                </main>\n            </Container>\n        </HashRouter>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {profileReducer} from \"./Reducers/ProfileReducer\";\nimport {dialogsReducer} from \"./Reducers/DialogsReducer\";\nimport {usersReducer} from \"./Reducers/UsersReducer\";\nimport {authReducer} from \"./Reducers/AuthReducer\";\nimport thunkMiddle from 'redux-thunk'\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {appReducer} from \"./Reducers/AppReducer\";\n\nlet rootReducer = combineReducers({\n    app: appReducer,\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    authUser: authReducer\n})\n\n// type RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nlet store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunkMiddle)))\n\n// @ts-ignore\nwindow.store = store\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {App} from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./Redux/ReduxStore\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/userDef.80d35342.png\";"],"sourceRoot":""}